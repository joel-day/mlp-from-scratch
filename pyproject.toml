[project]
name = "project-template-custom-cookiecutter"              # Package name (for identification and installation)
version = "0.1.0"               # Package version
description = "Project Template (Mono-repo)"
# authors = [{ name = "joelrday", email = "joelday.business@gmail.com" }]
# license = { text = "MIT" }
readme = "README.md"            # Path to your project's README file
requires-python = ">=3.10"      # Minimum Python version required
dependencies = [
    "boto3==1.34.75",           # AWS SDK for Python (interacts with AWS services)
    "ipykernel==6.29.5",        # Jupyter kernel support (to run notebooks)
    "pip==25.0",                # Ensures a minimum pip version
    "pydantic==2.10.6",         # Data validation and serialization library
    "python-dotenv==1.1.0",     # Loads environment variables from `.env` files
    "numpy>=1.26.0",            # Core package for numerical computations
    "pandas==1.5.3",            # Data analysis and manipulation library
    "pymongo==4.11.3",          # MongoDB driver for synchronous access
    "scikit-learn>1.1.3",       # Machine learning library
    "plotly==5.10.0",           # Interactive graphing library
    "matplotlib==3.6.0",        # Plotting library for static, animated, and interactive visualizations
    "seaborn==0.11.2",          # Statistical data visualization library
    "pytest==7.2.2",            # Testing framework for Python
    "flake8==7.0.0",             # Linter for checking Python code style and quality
    "flake8-pyproject==1.2.3"   # enables config using pyproject .toml
]


# Specify the build system
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# Tell Hatchling to include the folders from the package/ directory as packages
[tool.hatch.build]
include = ["packages/*"]


# Manage the environment like a package rather than a standalone virtual environment
[tool.uv]
package = true


# Defines a monorepo-style workspace
[tool.uv.workspace]
members = ["packages/*"]
exclude = ["notebooks", "data", "reports"]


# Config Pytest
[tool.pytest]
testpaths = ["packages"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests"
]


# Config Flake8 for enforcing coding style conventions
# Ignore specific warnings (https://pep8.readthedocs.io/en/latest/intro.html#error-codes)
[tool.flake8]
max-line-length = 88
ignore = []
select = ["E", "W", "F"]  # Select errors, warnings, and flake8-futures
exclude = [
    ".venv",
    "__pycache__",
]


# Custom CLI commands
[project.scripts]
test = "models.whisper_turbo_base_mlx:run_whisper"


# NOTES:
# uv automatically manages virtual environments, doesnt need to be in pyproject.toml
